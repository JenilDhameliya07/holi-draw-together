
/* eslint-disable */
/**
 * Generated API.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * Generated by convex@1.9.0.
 * To regenerate, run `npx convex dev`.
 * @module
 */

import type {
  ApiFromModules,
  OptionalRestArgs,
  ApiFromModulesWithOptionalRestArgs,
} from "convex/server";
import type { QueryCtx as BaseQueryCtx } from "convex/server";
import type { FunctionReference, FunctionReturnType } from "convex/server";
import type { Doc, Id, TableNames } from "./dataModel";

/**
 * A type describing your Convex API.
 *
 * This type includes information about the arguments, return type, and permissions
 * of all of your Convex functions, derived from your code by the Convex SDK.
 *
 * This type is used to provide autocompletion and type checking for dispatch helpers
 * like `useQuery` in the Convex React SDK and the various `mutation` and `query` methods.
 */
export type API = ApiFromModulesWithOptionalRestArgs<{
  drawing: {
    addStroke: {
      args: {
        roomId: string;
        userId: string;
        userName: string;
        points: {
          x: number;
          y: number;
        }[];
        color: string;
        size: number;
        tool: string;
      };
      returns: Id<"strokes">;
    };
    clearCanvas: {
      args: {
        roomId: string;
        userId: string;
      };
      returns: {
        success: boolean;
        message?: string | undefined;
      };
    };
    getStrokesInRoom: {
      args: {
        roomId: string;
      };
      returns: Doc<"strokes">[];
    };
  };
  rooms: {
    createRoom: {
      args: {
        name: string;
        createdBy: string;
      };
      returns: Id<"rooms">;
    };
    deleteRoom: {
      args: {
        roomId: string;
      };
      returns: {
        success: boolean;
        message?: string | undefined;
      };
    };
    getAllRooms: {
      args: {};
      returns: Doc<"rooms">[];
    };
    getRoom: {
      args: {
        roomId: string;
      };
      returns: Doc<"rooms"> | null;
    };
  };
  users: {
    createUser: {
      args: {
        name: string;
        roomId: string;
      };
      returns: Id<"users">;
    };
    getUser: {
      args: {
        userId: string;
      };
      returns: Doc<"users"> | null;
    };
    getUsersInRoom: {
      args: {
        roomId: string;
      };
      returns: Doc<"users">[];
    };
    updateUserStatus: {
      args: {
        userId: string;
        isActive: boolean;
        isDrawing?: boolean | undefined;
      };
      returns: Id<"users"> | null;
    };
  };
}>;

/**
 * A type describing your mutations including the first parameter, the query context.
 *
 * This type adds a first parameter to each mutation, the query context.
 * This is mainly used when calling internal mutations from queries.
 *
 * @typeParam Path - the path to the query (e.g. `myModule:myFunction`)
 * @typeParam Args - the type of the arguments to the query
 */
export type MutationWithArgs<Path extends keyof API, Args> = (
  ...args: [BaseQueryCtx, ...Args[]]
) => Promise<API[Path]["return"]>;

/**
 * The name of all of your modules in your Convex deployment.
 */
export type ModuleName = keyof API;

/**
 * The path to any query or mutation in your Convex deployment, of the form
 * `moduleName:functionName`.
 */
export type FunctionPath = {
  [mod in ModuleName]:
    | `${mod}:${Extract<keyof API[mod], string>}`
    | (keyof API[mod] & string);
}[ModuleName];

/**
 * The path to any query in your Convex deployment, of the form
 * `moduleName:functionName`.
 */
export type QueryPath = {
  [mod in ModuleName]: {
    [fn in keyof API[mod]]: API[mod][fn] extends {
      args: any;
      returns: any;
    }
      ? `${mod}:${fn & string}` | (fn & string)
      : never;
  }[keyof API[mod]];
}[ModuleName];

/**
 * The path to any mutation in your Convex deployment, of the form
 * `moduleName:functionName`.
 */
export type MutationPath = {
  [mod in ModuleName]: {
    [fn in keyof API[mod]]: API[mod][fn] extends {
      args: any;
      returns: any;
    }
      ? `${mod}:${fn & string}` | (fn & string)
      : never;
  }[keyof API[mod]];
}[ModuleName];

/**
 * The arguments for a given query or mutation.
 */
export type ArgsForFunction<Path extends FunctionPath> =
  Path extends `${infer Mod}:${infer Fun}`
    ? Mod extends ModuleName
      ? Fun extends keyof API[Mod]
        ? API[Mod][Fun] extends { args: infer Args }
          ? Args
          : never
        : never
      : never
    : Path extends keyof API["_"]
    ? API["_"][Path] extends { args: infer Args }
      ? Args
      : never
    : never;

/**
 * The return type for a given query or mutation.
 */
export type ReturnTypeForFunction<Path extends FunctionPath> =
  Path extends `${infer Mod}:${infer Fun}`
    ? Mod extends ModuleName
      ? Fun extends keyof API[Mod]
        ? API[Mod][Fun] extends { returns: infer Returns }
          ? Returns
          : never
        : never
      : never
    : Path extends keyof API["_"]
    ? API["_"][Path] extends { returns: infer Returns }
      ? Returns
      : never
    : never;

/**
 * An object mapping Convex function paths to their argument and return types.
 *
 * Useful for creating a strongly typed invoke or useFunctionCall hook.
 */
export type FunctionReference = {
  [path in FunctionPath]:
    | {
        args: OptionalRestArgs<ArgsForFunction<path>>;
        computeResult: ReturnTypeForFunction<path>;
        computeError: any;
        noTimeout: boolean;
      }
    | FunctionReference;
};

/**
 * A type-safe reference to a Convex function.
 *
 * It includes both the path and the function's argument and return types.
 *
 * It's highly recommended to use this type helper directly rather than reaching
 * for `api` manually, to ensure that you're providing the correct arguments and
 * getting the correct return type.
 *
 * @typeParam Path - The path to the function, like "module:functionName".
 * @typeParam Args - The type of the arguments to the function.
 */
export type Reference<Path extends FunctionPath, Args = ArgsForFunction<Path>> =
  {
    path: Path;
    args: Args;
    computeResult: ReturnTypeForFunction<Path>;
    computeError: any;
    noTimeout: boolean;
  };

/**
 * A type helper to create a type-safe reference to a Convex function.
 *
 * @param path - The path to the function, like "module:functionName".
 * @param args - The arguments to the function.
 * @returns A reference to the function.
 */
export declare function makeReference<Path extends FunctionPath>(
  path: Path,
  ...args: OptionalRestArgs<ArgsForFunction<Path>>
): Reference<Path, ArgsForFunction<Path>>;

export declare const api: ApiFromModules<API>;
