
/* eslint-disable */
/**
 * Generated data model types.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * Generated by convex@1.9.0.
 * To regenerate, run `npx convex dev`.
 * @module
 */

import { AnyDataModel } from "convex/server";
import type { GenericId } from "convex/values";
import schema from "../schema";

/**
 * The names of all of your Convex tables.
 */
export type TableNames = "rooms" | "strokes" | "users";

/**
 * The type of the `users` table.
 */
export interface UsersTable {
  isActive: boolean;
  isDrawing?: boolean | undefined;
  lastActive: number;
  name: string;
  roomId: string;
  _id: Id<"users">;
  _creationTime: number;
}

/**
 * The type of the `rooms` table.
 */
export interface RoomsTable {
  activeUsers: number;
  createdAt: number;
  createdBy: string;
  name: string;
  _id: Id<"rooms">;
  _creationTime: number;
}

/**
 * The type of the `strokes` table.
 */
export interface StrokesTable {
  color: string;
  points: {
    x: number;
    y: number;
  }[];
  roomId: string;
  size: number;
  timestamp: number;
  tool: string;
  userId: string;
  userName: string;
  _id: Id<"strokes">;
  _creationTime: number;
}

/**
 * A type describing your Convex data model.
 *
 * This type includes information about what tables you have, their schemas,
 * and the relationships between tables.
 * It's used to provide type information to the rest of the codebase.
 */
export type DataModel = {
  users: UsersTable;
  rooms: RoomsTable;
  strokes: StrokesTable;
};

/**
 * An ID from the `users` table.
 */
export type Id<T extends TableNames> = GenericId<T>;

/**
 * The TypeScript type of the given table.
 */
export type Doc<T extends TableNames> = T extends keyof DataModel
  ? DataModel[T]
  : never;

/**
 * Utility for extracting the document type from a document ID.
 *
 * For example, if you have an `Id<"users">`, `DocFromId<typeof id>` is
 * the TypeScript type for the document itself: `Doc<"users">`.
 */
export type DocFromId<T> = T extends Id<infer U> ? Doc<U> : never;

export const databaseReader = (dataModel: AnyDataModel) => dataModel;
export const validQueriesAndMutations = {};
